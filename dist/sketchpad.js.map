{"version":3,"file":"sketchpad.js","mappings":"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","sources":["webpack://Sketchpad/webpack/universalModuleDefinition","webpack://Sketchpad/./src/sketchpad.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"responsive-sketchpad\"] = factory();\n\telse\n\t\troot[\"Sketchpad\"] = factory();\n})(self, () => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Sketchpad = /** @class */ (function () {\n    function Sketchpad(el, opts) {\n        this.sketching = false;\n        this.isEraserActive = false;\n        this._strokes = []; // v2.0 - Rename to strokes\n        this.undoneStrokes = [];\n        this.readOnly = false;\n        this.aspectRatio = 1; // v2.0 - Remove; rely on canvas as source-of-truth\n        this.lineWidth = 5;\n        this.lineColor = '#000';\n        this.lineCap = 'round';\n        this.lineJoin = 'round';\n        this.lineMiterLimit = 10;\n        this.isInterpolationDone = false;\n        this.eraserSize = 20;\n        if (el == null) {\n            throw new Error('Must pass in a container element');\n        }\n        if (opts != null) {\n            this.setOptions(opts);\n        }\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        var width = (opts === null || opts === void 0 ? void 0 : opts.width) || el.clientWidth;\n        var height = (opts === null || opts === void 0 ? void 0 : opts.height) || width * this.aspectRatio;\n        this.setCanvasSize(width, height);\n        el.appendChild(this.canvas);\n        if (this._strokes.length > 0) {\n            this.redraw();\n        }\n        this.listen();\n    }\n    Object.defineProperty(Sketchpad.prototype, \"strokes\", {\n        // v2.0 - Remove; rename `_strokes`\n        get: function () {\n            return this._strokes.map(function (stroke) {\n                return {\n                    points: stroke.points,\n                    size: stroke.width,\n                    color: stroke.color,\n                    cap: stroke.cap,\n                    join: stroke.join,\n                    miterLimit: stroke.miterLimit,\n                    isInterpolationDone: stroke.isInterpolationDone,\n                };\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"undos\", {\n        // v2.0 - Remove\n        get: function () {\n            return this.undoneStrokes.map(function (s) { return s.toObj(); });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Sketchpad.prototype, \"opts\", {\n        // v2.0 - Remove\n        get: function () {\n            return {\n                backgroundColor: this.backgroundColor,\n                readOnly: this.readOnly,\n                width: this.canvas.width,\n                height: this.canvas.height,\n                aspectRatio: this.canvas.width / this.canvas.height,\n                line: {\n                    size: this.lineWidth,\n                    color: this.lineColor,\n                    cap: this.lineCap,\n                    join: this.lineJoin,\n                    miterLimit: this.lineMiterLimit,\n                    isInterpolationDone: this.isInterpolationDone,\n                },\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Convert the sketchpad to a JSON object that can be loaded into\n    // other sketchpads or stored on a server\n    Sketchpad.prototype.toJSON = function () {\n        return {\n            aspectRatio: this.canvas.width / this.canvas.height,\n            strokes: this.strokes,\n        };\n    };\n    // Load a json object into the sketchpad\n    Sketchpad.prototype.loadJSON = function (data) {\n        var strokeObjs = data.strokes || [];\n        this._strokes = strokeObjs.map(function (s) { return Stroke.fromObj(s); });\n        this.redraw();\n    };\n    // Converts to image File\n    Sketchpad.prototype.toDataURL = function (type) {\n        return this.canvas.toDataURL(type);\n    };\n    // Set the size of canvas\n    Sketchpad.prototype.setCanvasSize = function (width, height) {\n        this.canvas.setAttribute('width', width.toString());\n        this.canvas.setAttribute('height', height.toString());\n        this.canvas.style.width = width + 'px';\n        this.canvas.style.height = height + 'px';\n    };\n    // Get the size of the canvas\n    Sketchpad.prototype.getCanvasSize = function () {\n        return {\n            width: this.canvas.width,\n            height: this.canvas.height,\n        };\n    };\n    // Set the line width\n    Sketchpad.prototype.setLineWidth = function (width) {\n        this.lineWidth = width;\n    };\n    // Set the eraser size\n    Sketchpad.prototype.setEraserSize = function (size) {\n        this.eraserSize = size;\n        this.updateEraserIndicatorSize();\n    };\n    Sketchpad.prototype.toggleEraserMode = function () {\n        this.isEraserActive = !this.isEraserActive;\n    };\n    // Set the line width\n    Sketchpad.prototype.setLineSize = function (size) {\n        this.lineWidth = size;\n    };\n    // Set the line color\n    Sketchpad.prototype.setLineColor = function (color) {\n        this.lineColor = color;\n    };\n    // Set whether or not new strokes can be drawn on the canvas\n    Sketchpad.prototype.setReadOnly = function (readOnly) {\n        this.readOnly = readOnly;\n    };\n    // Undo the last stroke\n    Sketchpad.prototype.undo = function () {\n        if (this._strokes.length === 0) {\n            return;\n        }\n        this.undoneStrokes.push(this._strokes.pop());\n        this.redraw();\n    };\n    // Redo the last undone stroke\n    Sketchpad.prototype.redo = function () {\n        if (this.undoneStrokes.length === 0) {\n            return;\n        }\n        this._strokes.push(this.undoneStrokes.pop());\n        this.redraw();\n    };\n    // Clear the sketchpad\n    Sketchpad.prototype.clear = function () {\n        this.undoneStrokes = [];\n        this._strokes = [];\n        this.redraw();\n    };\n    // Draw a straight line\n    Sketchpad.prototype.drawLine = function (start, end, lineOpts) {\n        this.setOptions({ line: lineOpts });\n        start = this.getPointRelativeToCanvas(new Point(start.x, start.y));\n        end = this.getPointRelativeToCanvas(new Point(end.x, end.y));\n        this.pushStroke([start, end]);\n        this.redraw();\n    };\n    // Resize the canvas maintaining original aspect ratio\n    Sketchpad.prototype.resize = function (width) {\n        var height = width * this.aspectRatio;\n        this.lineWidth = this.lineWidth * (width / this.canvas.width);\n        this.eraserSize = this.eraserSize * (width / this.canvas.width);\n        this.setCanvasSize(width, height);\n        this.redraw();\n    };\n    // Returns a points x,y locations relative to the size of the canvas\n    Sketchpad.prototype.getPointRelativeToCanvas = function (point) {\n        return {\n            x: point.x / this.canvas.width,\n            y: point.y / this.canvas.height,\n            skipped: false,\n        };\n    };\n    //  Get the line size relative to the size of the canvas\n    Sketchpad.prototype.getLineSizeRelativeToCanvas = function (width) {\n        return width / this.canvas.width;\n    };\n    Sketchpad.prototype.updateEraserIndicatorSize = function () {\n        var _a;\n        if (this.isEraserActive && this.updateCircleCursor) {\n            var circleCursor = (_a = this.canvas.parentNode) === null || _a === void 0 ? void 0 : _a.lastChild;\n            circleCursor.style.width = \"\".concat(this.eraserSize, \"px\");\n            circleCursor.style.height = \"\".concat(this.eraserSize, \"px\");\n            this.updateCircleCursor(new MouseEvent('mousemove'));\n        }\n    };\n    Sketchpad.prototype.setOptions = function (opts) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (opts.backgroundColor) {\n            this.backgroundColor = opts.backgroundColor;\n        }\n        if ((_a = opts.line) === null || _a === void 0 ? void 0 : _a.size) {\n            this.lineWidth = opts.line.size;\n        }\n        if ((_b = opts.line) === null || _b === void 0 ? void 0 : _b.isInterpolationDone) {\n            this.isInterpolationDone = opts.line.isInterpolationDone;\n        }\n        if ((_c = opts.line) === null || _c === void 0 ? void 0 : _c.cap) {\n            this.lineCap = opts.line.cap;\n        }\n        if ((_d = opts.line) === null || _d === void 0 ? void 0 : _d.join) {\n            this.lineJoin = opts.line.join;\n        }\n        if ((_e = opts.line) === null || _e === void 0 ? void 0 : _e.miterLimit) {\n            this.lineMiterLimit = opts.line.miterLimit;\n        }\n        if (opts.aspectRatio) {\n            this.aspectRatio = opts.aspectRatio;\n        }\n        if (opts.data) {\n            this._strokes = (_g = (_f = opts.data.strokes) === null || _f === void 0 ? void 0 : _f.map(function (s) { return Stroke.fromObj(s); })) !== null && _g !== void 0 ? _g : [];\n        }\n        if (opts.onDrawEnd) {\n            this.onDrawEnd = opts.onDrawEnd;\n        }\n    };\n    // For a given event, get the point at which the event occurred\n    // relative to the canvas\n    Sketchpad.prototype.getCursorRelativeToCanvas = function (e) {\n        var point;\n        var rect = this.canvas.getBoundingClientRect();\n        if (isTouchEvent(e)) {\n            var touchEvent = e;\n            point = new Point(touchEvent.touches[0].clientX - rect.left, touchEvent.touches[0].clientY - rect.top);\n        }\n        else {\n            var mouseEvent = e;\n            point = new Point(mouseEvent.clientX - rect.left, mouseEvent.clientY - rect.top);\n        }\n        return new Point(point.x / this.canvas.width, point.y / this.canvas.height);\n    };\n    Sketchpad.prototype.normalizePoint = function (p) {\n        return new Point(p.x * this.canvas.width, p.y * this.canvas.height);\n    };\n    Sketchpad.prototype.midPoint = function (p1, p2) {\n        return new Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);\n    };\n    Sketchpad.prototype.getLineWidthRelativeToCanvas = function (size) {\n        return size / this.canvas.width;\n    };\n    Sketchpad.prototype.normalizeLineWidth = function (width) {\n        return width * this.canvas.width;\n    };\n    // Erase the entire canvas\n    Sketchpad.prototype.clearCanvas = function () {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.backgroundColor) {\n            this.ctx.fillStyle = this.backgroundColor;\n            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n    };\n    // Draw a single stroke\n    Sketchpad.prototype.drawStroke = function (stroke) {\n        if (stroke.points == null)\n            return;\n        this.ctx.beginPath();\n        for (var i = 0; i < stroke.points.length - 1; i++) {\n            var currentPoint = stroke.points[i];\n            var nextPoint = stroke.points[i + 1];\n            if (!(currentPoint.skipped || (nextPoint && nextPoint.skipped))) {\n                var e = this.normalizePoint(currentPoint);\n                var n = this.normalizePoint(nextPoint);\n                this.ctx.moveTo(e.x, e.y);\n                this.ctx.lineTo(n.x, n.y);\n            }\n        }\n        this.ctx.closePath();\n        if (stroke.color) {\n            this.ctx.strokeStyle = stroke.color;\n        }\n        if (stroke.width) {\n            this.ctx.lineWidth = this.normalizeLineWidth(stroke.width);\n        }\n        if (stroke.join) {\n            this.ctx.lineJoin = stroke.join;\n        }\n        if (stroke.cap) {\n            this.ctx.lineCap = stroke.cap;\n        }\n        if (stroke.miterLimit) {\n            this.ctx.miterLimit = stroke.miterLimit;\n        }\n        this.ctx.stroke();\n    };\n    Sketchpad.prototype.drawQuadraticCurveStroke = function (stroke) {\n        if (stroke.points == null)\n            return;\n        this.ctx.beginPath();\n        var originPt = this.normalizePoint(stroke.points[0]);\n        var controlPt = originPt;\n        var destinationPt = originPt;\n        if (stroke.points.length > 1) {\n            destinationPt = this.normalizePoint(this.midPoint(stroke.points[0], stroke.points[1]));\n        }\n        if (!(originPt.skipped || (destinationPt && destinationPt.skipped))) {\n            this.ctx.moveTo(originPt.x, originPt.y);\n            this.ctx.quadraticCurveTo(controlPt.x, controlPt.y, destinationPt.x, destinationPt.y);\n        }\n        for (var i = 1; i < stroke.points.length - 1; i++) {\n            originPt = destinationPt;\n            controlPt = this.normalizePoint(stroke.points[i]);\n            destinationPt = this.normalizePoint(this.midPoint(stroke.points[i], stroke.points[i + 1]));\n            if (!(originPt.skipped || (destinationPt && destinationPt.skipped))) {\n                this.ctx.quadraticCurveTo(controlPt.x, controlPt.y, destinationPt.x, destinationPt.y);\n            }\n        }\n        if (stroke.color) {\n            this.ctx.strokeStyle = stroke.color;\n        }\n        if (stroke.width) {\n            this.ctx.lineWidth = this.normalizeLineWidth(stroke.width);\n        }\n        if (stroke.join) {\n            this.ctx.lineJoin = stroke.join;\n        }\n        if (stroke.cap) {\n            this.ctx.lineCap = stroke.cap;\n        }\n        if (stroke.miterLimit) {\n            this.ctx.miterLimit = stroke.miterLimit;\n        }\n        this.ctx.stroke();\n    };\n    Sketchpad.prototype.pushStroke = function (points) {\n        this._strokes.push(Stroke.fromObj({\n            points: points,\n            size: this.getLineWidthRelativeToCanvas(this.lineWidth),\n            color: this.lineColor,\n            cap: this.lineCap,\n            join: this.lineJoin,\n            miterLimit: this.lineMiterLimit,\n            isInterpolationDone: this.isInterpolationDone,\n        }));\n    };\n    Sketchpad.prototype.pushPoint = function (point) {\n        var stroke = this._strokes[this._strokes.length - 1];\n        if (stroke.points) {\n            stroke.points.push(point);\n        }\n    };\n    // Redraw the whole canvas\n    Sketchpad.prototype.redraw = function () {\n        var _this = this;\n        this.clearCanvas();\n        if (this.isEraserActive) {\n            this._strokes.forEach(function (s) { return _this.drawStroke(s); });\n        }\n        else {\n            this._strokes.forEach(function (s, index) {\n                if (index === _this._strokes.length - 1) {\n                    if (_this.sketching) {\n                        _this.drawQuadraticCurveStroke(s);\n                    }\n                    else {\n                        _this.drawStroke(s);\n                    }\n                }\n                else {\n                    _this.drawStroke(s);\n                }\n            });\n        }\n    };\n    Sketchpad.prototype.listen = function () {\n        var _this = this;\n        ['mousedown', 'touchstart'].forEach(function (name) {\n            return _this.canvas.addEventListener(name, function (e) { return _this.startStrokeHandler(e); });\n        });\n        ['mousemove', 'touchmove'].forEach(function (name) { return _this.canvas.addEventListener(name, function (e) { return _this.drawStrokeHandler(e); }); });\n        ['mouseup', 'mouseleave', 'touchend'].forEach(function (name) {\n            return _this.canvas.addEventListener(name, function (e) { return _this.endStrokeHandler(e); });\n        });\n    };\n    Sketchpad.prototype.startStrokeHandler = function (e) {\n        e.preventDefault();\n        if (this.readOnly) {\n            return;\n        }\n        this.sketching = true;\n        var point = this.getCursorRelativeToCanvas(e);\n        if (this.isEraserActive) {\n            this.erasePoints(point);\n        }\n        else {\n            this.pushStroke([point]);\n        }\n        this.redraw();\n    };\n    Sketchpad.prototype.drawStrokeHandler = function (e) {\n        var point = this.getCursorRelativeToCanvas(e);\n        e.preventDefault();\n        if (!this.sketching)\n            return;\n        if (this.isEraserActive) {\n            this.erasePoints(point);\n        }\n        else {\n            this.pushPoint(point);\n        }\n        this.redraw();\n    };\n    Sketchpad.prototype.endStrokeHandler = function (e) {\n        e.preventDefault();\n        if (!this.sketching)\n            return;\n        this.sketching = false;\n        if (isTouchEvent(e)) {\n            return; // touchend events do not have a position\n        }\n        var point = this.getCursorRelativeToCanvas(e);\n        if (this.isEraserActive) {\n            this.erasePoints(point);\n        }\n        else {\n            this.pushPoint(point);\n            this.createNewStrokesAfterInterpolation(this._strokes[this._strokes.length - 1], 2);\n        }\n        this.createNewStrokesAfterErasing();\n        this.redraw();\n        if (this.onDrawEnd) {\n            this.onDrawEnd();\n        }\n    };\n    Sketchpad.prototype.erasePoints = function (cursor) {\n        var eraserSize = this.getLineWidthRelativeToCanvas(this.eraserSize) / 2;\n        var areaOfEraser = eraserSize * eraserSize;\n        this._strokes.forEach(function (stroke) {\n            // @ts-ignore\n            stroke.points.forEach(function (point) {\n                var dx = point.x - cursor.x;\n                var dy = point.y - cursor.y;\n                var distanceSquared = dx * dx + dy * dy;\n                if (distanceSquared <= areaOfEraser) {\n                    point.skipped = true;\n                }\n            });\n        });\n    };\n    Sketchpad.prototype.createNewStrokesAfterErasing = function () {\n        var newStrokes = [];\n        var previousStrokes = this.deepClone(this._strokes);\n        var _loop_1 = function (i) {\n            var points = previousStrokes[i].points || [];\n            var newStroke = {\n                // @ts-ignore\n                width: previousStrokes[i].width,\n                color: previousStrokes[i].color,\n                cap: previousStrokes[i].cap,\n                join: previousStrokes[i].join,\n                miterLimit: previousStrokes[i].miterLimit,\n                isInterpolationDone: previousStrokes[i].isInterpolationDone,\n                points: [],\n                toObj: function () {\n                    return {\n                        points: newStroke.points,\n                        size: newStroke.width,\n                        color: newStroke.color,\n                        cap: newStroke.cap,\n                        join: newStroke.join,\n                        miterLimit: newStroke.miterLimit,\n                        isInterpolationDone: newStroke.isInterpolationDone,\n                    };\n                },\n            };\n            for (var j = 0; j < points.length; j++) {\n                if (points[j].skipped) {\n                    if (newStroke.points.length > 0) {\n                        newStrokes.push(this_1.deepClone(newStroke));\n                        newStroke.points = [];\n                    }\n                }\n                else {\n                    // @ts-ignore\n                    newStroke.points.push(points[j]);\n                    if (j + 1 == points.length) {\n                        newStrokes.push(this_1.deepClone(newStroke));\n                    }\n                }\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < previousStrokes.length; i++) {\n            _loop_1(i);\n        }\n        this._strokes = newStrokes;\n    };\n    Sketchpad.prototype.createNewStrokesAfterInterpolation = function (stroke, interval) {\n        this._strokes.pop();\n        var newStroke = this.interpolateExistingShapePaths(stroke, interval);\n        this._strokes.push(newStroke);\n    };\n    Sketchpad.prototype.interpolateExistingShapePaths = function (stroke, interval) {\n        var _this = this;\n        stroke.isInterpolationDone = true;\n        var points = stroke.points || [];\n        var transformedPoints = points.map(function (point) { return ({\n            x: point.x * _this.canvas.width,\n            y: point.y * _this.canvas.height,\n            skipped: false,\n        }); });\n        var newStroke = {\n            width: stroke.width,\n            color: stroke.color,\n            cap: stroke.cap,\n            join: stroke.join,\n            miterLimit: stroke.miterLimit,\n            isInterpolationDone: stroke.isInterpolationDone,\n            points: [],\n            toObj: function () {\n                return {\n                    points: newStroke.points,\n                    size: newStroke.width,\n                    color: newStroke.color,\n                    cap: newStroke.cap,\n                    join: newStroke.join,\n                    miterLimit: newStroke.miterLimit,\n                    isInterpolationDone: newStroke.isInterpolationDone,\n                };\n            },\n        };\n        // @ts-ignore\n        newStroke.points.push({\n            x: transformedPoints[0].x / this.canvas.width,\n            y: transformedPoints[0].y / this.canvas.height,\n        });\n        var originPt = transformedPoints[0];\n        var controlPt = originPt;\n        var destinationPt = originPt;\n        if (transformedPoints.length > 1) {\n            destinationPt = this.midPoint(transformedPoints[0], transformedPoints[1]);\n            var distance = Math.hypot(destinationPt.x - originPt.x, destinationPt.y - originPt.y);\n            var numIntervals = Math.max(1, Math.ceil(distance / interval));\n            var interpolatedPoints = this.interpolateQuadraticCurve(originPt, controlPt, destinationPt, numIntervals);\n            interpolatedPoints.forEach(function (point) {\n                // @ts-ignore\n                newStroke.points.push({ x: point.x / _this.canvas.width, y: point.y / _this.canvas.height, skipped: false });\n            });\n        }\n        for (var j = 1; j < transformedPoints.length - 1; j++) {\n            originPt = destinationPt;\n            controlPt = transformedPoints[j];\n            destinationPt = this.midPoint(transformedPoints[j], transformedPoints[j + 1]);\n            var distance = Math.hypot(destinationPt.x - originPt.x, destinationPt.y - originPt.y);\n            var numIntervals = Math.max(1, Math.ceil(distance / interval));\n            var interpolatedPoints = this.interpolateQuadraticCurve(originPt, controlPt, destinationPt, numIntervals);\n            interpolatedPoints.forEach(function (point) {\n                // @ts-ignore\n                newStroke.points.push({ x: point.x / _this.canvas.width, y: point.y / _this.canvas.height, skipped: false });\n            });\n        }\n        return newStroke;\n    };\n    Sketchpad.prototype.eraserModeOn = function () {\n        this.isEraserActive = true;\n        this.eraserModeIndicatorOn();\n    };\n    Sketchpad.prototype.eraserModeOff = function () {\n        this.isEraserActive = false;\n        this.eraserModeIndicatorOff();\n    };\n    Sketchpad.prototype.eraserModeIndicatorOn = function () {\n        var _this = this;\n        var _a;\n        this.canvas.style.cursor = 'none'; // Hide the default cursor\n        // Create a circle cursor element\n        var circleCursor = document.createElement('div');\n        circleCursor.style.position = 'absolute';\n        circleCursor.style.width = \"\".concat(this.eraserSize, \"px\");\n        circleCursor.style.height = \"\".concat(this.eraserSize, \"px\");\n        circleCursor.style.border = '2px solid #000';\n        circleCursor.style.borderRadius = '50%';\n        circleCursor.style.pointerEvents = 'none'; // Make the cursor element not intercept mouse events\n        circleCursor.style.zIndex = '999'; // Ensure the circle cursor is on top of other elements\n        // Attach circle cursor to the canvas container\n        (_a = this.canvas.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(circleCursor);\n        // Update circle cursor position on mouse move\n        var updateCircleCursor = function (e) {\n            var rect = _this.canvas.getBoundingClientRect();\n            var mouseX = e.clientX - rect.left;\n            var mouseY = e.clientY - rect.top;\n            // Check if the mouse is within the canvas boundaries\n            if (mouseX >= 0 && mouseX <= rect.width && mouseY >= 0 && mouseY <= rect.height) {\n                var x = mouseX - _this.eraserSize / 2;\n                var y = mouseY - _this.eraserSize / 2;\n                circleCursor.style.left = \"\".concat(x, \"px\");\n                circleCursor.style.top = \"\".concat(y, \"px\");\n                circleCursor.style.display = 'block'; // Show the cursor only when inside the canvas\n            }\n            else {\n                circleCursor.style.display = 'none'; // Hide the cursor if outside the canvas\n            }\n        };\n        // Add event listeners to update circle cursor position\n        window.addEventListener('mousemove', updateCircleCursor);\n        // Store update function for later removal\n        // @ts-ignore\n        this.updateCircleCursor = updateCircleCursor;\n    };\n    Sketchpad.prototype.eraserModeIndicatorOff = function () {\n        var _a;\n        this.canvas.style.cursor = ''; // Restore the default cursor\n        // Remove circle cursor and event listener\n        if (this.updateCircleCursor) {\n            var circleCursor = (_a = this.canvas.parentNode) === null || _a === void 0 ? void 0 : _a.lastChild;\n            circleCursor === null || circleCursor === void 0 ? void 0 : circleCursor.remove();\n            window.removeEventListener('mousemove', this.updateCircleCursor);\n            // @ts-ignore\n            this.updateCircleCursor = null;\n        }\n    };\n    Sketchpad.prototype.interpolateQuadraticCurve = function (originPt, controlPt, destinationPt, numPoints) {\n        var interpolatedPoints = [];\n        for (var pt = 0; pt < numPoints; pt += 1) {\n            var t = pt / numPoints;\n            var x = Math.pow(1 - t, 2) * originPt.x + 2 * (1 - t) * t * controlPt.x + Math.pow(t, 2) * destinationPt.x;\n            var y = Math.pow(1 - t, 2) * originPt.y + 2 * (1 - t) * t * controlPt.y + Math.pow(t, 2) * destinationPt.y;\n            interpolatedPoints.push({ x: x, y: y });\n        }\n        return interpolatedPoints;\n    };\n    Sketchpad.prototype.deepClone = function (obj) {\n        return JSON.parse(JSON.stringify(obj));\n    };\n    return Sketchpad;\n}());\nexports.default = Sketchpad;\nfunction isTouchEvent(e) {\n    return e.type.indexOf('touch') !== -1; // v2.0 - Switch to startsWith\n}\nvar Point = /** @class */ (function () {\n    function Point(x, y, skipped) {\n        if (skipped === void 0) { skipped = false; }\n        this.x = x;\n        this.y = y;\n        this.skipped = skipped;\n    }\n    return Point;\n}());\nvar Stroke = /** @class */ (function () {\n    function Stroke() {\n    }\n    Stroke.fromObj = function (s) {\n        var stroke = new Stroke();\n        stroke.points = s.points;\n        stroke.width = s.size;\n        stroke.color = s.color;\n        stroke.cap = s.cap;\n        stroke.join = s.join;\n        stroke.miterLimit = s.miterLimit;\n        stroke.isInterpolationDone = s.isInterpolationDone;\n        return stroke;\n    };\n    Stroke.prototype.toObj = function () {\n        return {\n            points: this.points,\n            size: this.width,\n            color: this.color,\n            cap: this.cap,\n            join: this.join,\n            miterLimit: this.miterLimit,\n            isInterpolationDone: this.isInterpolationDone,\n        };\n    };\n    return Stroke;\n}());\n"],"names":["root","factory","exports","module","define","amd","self","Sketchpad","el","opts","this","sketching","isEraserActive","_strokes","undoneStrokes","readOnly","aspectRatio","lineWidth","lineColor","lineCap","lineJoin","lineMiterLimit","isInterpolationDone","eraserSize","Error","setOptions","canvas","document","createElement","ctx","getContext","width","clientWidth","height","setCanvasSize","appendChild","length","redraw","listen","Object","defineProperty","prototype","get","map","stroke","points","size","color","cap","join","miterLimit","enumerable","configurable","s","toObj","backgroundColor","line","toJSON","strokes","loadJSON","data","strokeObjs","Stroke","fromObj","toDataURL","type","setAttribute","toString","style","getCanvasSize","setLineWidth","setEraserSize","updateEraserIndicatorSize","toggleEraserMode","setLineSize","setLineColor","setReadOnly","undo","push","pop","redo","clear","drawLine","start","end","lineOpts","getPointRelativeToCanvas","Point","x","y","pushStroke","resize","point","skipped","getLineSizeRelativeToCanvas","_a","updateCircleCursor","circleCursor","parentNode","lastChild","concat","MouseEvent","_b","_c","_d","_e","_f","_g","onDrawEnd","getCursorRelativeToCanvas","e","rect","getBoundingClientRect","isTouchEvent","touchEvent","touches","clientX","left","clientY","top","mouseEvent","normalizePoint","p","midPoint","p1","p2","getLineWidthRelativeToCanvas","normalizeLineWidth","clearCanvas","clearRect","fillStyle","fillRect","drawStroke","beginPath","i","currentPoint","nextPoint","n","moveTo","lineTo","closePath","strokeStyle","drawQuadraticCurveStroke","originPt","controlPt","destinationPt","quadraticCurveTo","pushPoint","_this","forEach","index","name","addEventListener","startStrokeHandler","drawStrokeHandler","endStrokeHandler","preventDefault","erasePoints","createNewStrokesAfterInterpolation","createNewStrokesAfterErasing","cursor","areaOfEraser","dx","dy","newStrokes","previousStrokes","deepClone","_loop_1","newStroke","j","this_1","interval","interpolateExistingShapePaths","transformedPoints","distance","Math","hypot","numIntervals","max","ceil","interpolateQuadraticCurve","eraserModeOn","eraserModeIndicatorOn","eraserModeOff","eraserModeIndicatorOff","position","border","borderRadius","pointerEvents","zIndex","mouseX","mouseY","display","window","remove","removeEventListener","numPoints","interpolatedPoints","pt","t","pow","obj","JSON","parse","stringify","indexOf"],"sourceRoot":""}